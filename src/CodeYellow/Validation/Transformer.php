<?php
namespace CodeYellow\Validation;

use Lang;

/**
 * Transforms the messages generated by the validator into
 * the api format that is used at CY
 */
class Transformer extends \League\Fractal\TransformerAbstract
{
    /**
     * Transforms the error messages from the validator
     * into the validation_errors array as defined in.
     *
     * @see http://wiki/doku.php?id=rest_api_conventions#validation_errors
     */
    public function transform(array $messages)
    {
        // Transforms a validator error to a error
        // that is displayed in an exception.
        // I.e. 'outOfRange => [10,100]' is transformed to
        // 'outofrange' => ['min': 10, 'max': 100].
        foreach ($messages as &$message) {
            $newMessage = [];
            foreach ($message as $key => $value) {
                // Make sure that all keys are lower case
                $key = strtolower($key);
                // Get all attributes that are in this message
                // e.g. if the message is outofrange, it will
                // return min and max.
                $attributes = $this->getAttributeNames($key);

                // set the error key.
                $error = ['code' => $key];

                // Now bind all attribute names with all the
                // attributes they belong to.
                $i = 0;
                foreach ($attributes as $attr) {
                    $error[$attr] = $value[$i++];
                }
                // Add this error to the message.
                $newMessage[] = $error;
            }

            // replace the old errors with the new error.
            $message = $newMessage;
        }

        return $messages;
    }

    /**
     * Hack to get the attribute names for a given key
     * Opens the language files, and reads all the keys
     * Easiest way as long as language files are consistent.
     */
    public function getAttributeNames($key)
    {
        // Open the language file for validation.
        $lang = Lang::get('validation');

        // Fetch the message that belongs to the key.
        // e.g. 'outOfRange' => ':attribute should be between :min and :max'
        // will return ':attribute should be between :min and :max' if key = 'outOfRange'.
        $message = isset($lang[$key]) ? $lang[$key] : '';

        // Sometimes the message is an array of messages for different cases
        // in that case take the first message.
        if (is_array($message)) {
            $message = array_first(
                $message,
                function () {
                    return true;
                },
                ''
            );
        }

        // Now, find all parameters from the message.
        // e.g. ':attribute should be between :min and :max'
        // returns ['attribute', 'min', 'max'].
        preg_match_all('/ :([a-zA-z0-9]*)/', $message, $matches);

        // Check if the first attribute is 'attribute'. If so, skip
        // this attribute, since it is not important.
        $names = $matches[1];
        if (isset($names[0]) && $names[0] == 'attribute') {
            unset($names[0]);
        }
        // return all found attributes ['min', 'max'].
        return $names;
    }
}
